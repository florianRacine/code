#!/bin/bash

# =================================================================
# ======================   VARIABLES   ============================
# =================================================================

# Path variables
documents_dir="$HOME/Documents"
dotfiles_dir="$documents_dir/code/dotfiles"

# Packages to install
packages=(
    "vim"
    "vim-gtk" 
    "bat"
    "ripgrep"
    "tmux" 
    "fzf" 
    "xclip" 
    "git" 
    "chromium" 
    "terminator" 
    "filezilla"
    "vlc"
    "tree" 
    "figlet" 
    "toilet" 
    "boxes" 
    "lolcat" 
    "python3"
    "python3-pip"
    "texlive"
    "texlive-latex-extra"
    "texlive-lang-french"
)

# Colors
GREEN="\e[32m"
RED="\e[31m"
RESET="\e[0m"





# =================================================================
# ======================   FUNCTIONS   ============================
# =================================================================

# Function to display colored log messages
log() {
    echo -e "${GREEN}$1${RESET}"
}

# Function to display colored error messages
error() {
    echo -e "${RED}$1${RESET}"
}

# Function to copy a file or directory
copy_file() {
    source_file="$1"
    target_file="$2"
    if [ -e "$source_file" ]; then
        cp -r "$source_file" "$target_file" || error "Failed to copy $source_file"
    else
        error "File not found: $source_file"
    fi
}





# =================================================================
# ========================   MAIN   ===============================
# =================================================================

# Update system
log "Update system START"
apt update || error "Update system failed"
log "Update system END"

# Upgrade system
log "Upgrade system START"
apt upgrade || error "Upgrade system failed"
log "Upgrade system END"

# Install packages
log "Install packages START"
for package in "${packages[@]}"; do
    if ! dpkg-query -W -f='${Status}' "$package" | grep -q "install ok installed"; then
        log "Install $package START"
        apt install "$package" -y || error "Failed to install $package"
        log "Install $package END"
    else
        log "$package is already installed"
    fi
done
log "Install packages END"

# Clone repository
log "Start cloning repository"
log "Change dir to Documents"
cd "$documents_dir"
log "Clone repo: code START"
if [ -d "$documents_dir/code" ]; then
    (
        cd "$documents_dir/code"
        git pull origin main || error "Failed to update repository: code"
    )
else
    git clone "https://github.com/florianRacine/code.git" || error "Failed to clone repository: code"
fi
log "Clone repo: code END"

# Import DotFiles
log "Import DotFiles"
copy_file "$dotfiles_dir/.vimrc" "$HOME/.vimrc"
copy_file "$dotfiles_dir/.bashrc" "$HOME/.bashrc"
copy_file "$dotfiles_dir/.zshrc" "$HOME/.zshrc"
copy_file "$dotfiles_dir/.vim" "$HOME/.vim"
copy_file "$dotfiles_dir/.tmux.conf" "$HOME/.tmux.conf"
mkdir "$HOME/.config/terminator"
copy_file "$dotfiles_dir/.terminator" "$HOME/.config/terminator/config"

# Install VimPlug
log "Install VimPlug START"
curl -fLo "$HOME/.vim/autoload/plug.vim" --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim || error "Failed to install VimPlug"
log "Install VimPlug END"

# Download background Terminal
log "Install background Terminal START"
cd "$documents_dir"
curl -O "https://fracine.perso.centrale-marseille.fr/bgTerminal.png" || error "Failed to download background Terminal"
log "Install background Terminal END"

log "END setup script"

# Display custom message
toilet -f ivrit 'Giga CHAD is on !' | boxes -d cat -a hc -p h8 | lolcat
